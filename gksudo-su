#!/bin/bash
####################################################################################
# GKSUDO-SU This script is NOT to be run independently and will fail if tried.
#    This secondary script is called by GKSUDO-PK for actions requiring elevated 
#    (sudo) privileges. Required variable assignments are passed in the 
#    calling statement from GKSUDO-PK.  Created under GPLv3 license, by
#    William Rueger (furryfixer) 
##=================================================================================##

err_exit1 () {
   if ! (zenity --warning --title="gksudo-pk Error" --text="$*" --no-wrap --no-markup 2>/dev/null); then
       sed 's^\\n^^g' <<< "$*"  # print error without zenity \n format
   fi
   rm $xauth_gksudo 2> /dev/null
   rm $passwdkey_script 2> /dev/null
   rm /tmp/gk/sudo.pk.error 2> /dev/null
   if [[ -d "$as_usr_rundir" ]]; then
         if [[ -f "$as_usr_rundir/pids" ]]; then
               read dbus_pid < $as_usr_rundir/pids
               kill $dbus_pid 2> /dev/null  # Try to kill some orphan dbus-daemons, since not dbus-run-session
		   rm $as_usr_rundir/pids
         fi
         umount "$as_usr_rundir/gvfs" 2> /dev/null
         umount "$as_usr_rundir/doc" 2> /dev/null
         rm -R $as_usr_rundir 
   fi
gk_instances=$(pgrep -c gksudo-su)
if [[ $XDG_SESSION_TYPE = "wayland" ]] && [[ $gk_instances -lt 2 ]]; then
         chmod 0700 $orig_xdg_rundir
         chmod 0755 $wayland_socket
   fi
   exit 1
}

if [[ -z "$INVOKING_USR" ]]; then
	err_exit1 "STOP! gksudo-su improperly called, or
attempted to run independently of gksudo-pk "
fi
as_usr_rundir=$(mktemp -d /tmp/gk/runtime-gksudo-as-$as_user.XXXX)
chmod 0700 $as_usr_rundir
chown $as_user $as_usr_rundir

if [[ $XDG_SESSION_TYPE != "wayland" ]] && [ -z "$WAYLAND_DISPLAY" ]; then  # X11 Session
	if  ! pgrep Xorg &> /dev/null; then
		echo "STOP! No X11 or Wayland Display Server found for gksudo-pk" >&2
		exit 1
	fi
	[[ -z "$DISPLAY" ]] && DISPLAY=":0"
	xauth_gksudo=$(mktemp /tmp/gk/.gk.XXXXXXX)
	cp $XAUTHORITY $xauth_gksudo
	XAUTHORITY=$xauth_gksudo
	chmod 0600 $xauth_gksudo
	chown $as_user $xauth_gksudo
	xauth_loc=""
	if [ ! -s "$XAUTHORITY" ]; then
		x11_ps=$(ps -C Xorg -o args h)
		xauth_loc=$(echo ${x11_ps#*auth } | cut -d " " -f 1)
		if [ ! -s "$xauth_loc" ]; then
			err_exit1 "STOP! Unable to find working .Xauthority file "
		else
			cp $xauth_loc $XAUTHORITY
		fi
	fi

else # WAYLAND SESSION!

	XDG_SESSION_TYPE="wayland"
	chmod 0755 $orig_xdg_rundir 
      if ! (chmod 0777 $wayland_socket); then
            err_exit1 "ERROR! Unable to find or access Wayland Display socket"
      fi   
      as_usr_wayland_sock=$as_usr_rundir/wayland-0
      if [ ! -L "$as_usr_wayland_sock" ]; then
            if ! (ln -s $wayland_socket $as_usr_wayland_sock 2>/dev/null); then
                  err_exit1 "STOP! Failed to link to Wayland Socket "
            fi
      fi
fi

as_usr_home=$(eval echo "~${as_user}")
timestamp=`date +%D" "%H:%M:%S`
program=$@
echo "${timestamp}.  User <${INVOKING_USR}> ran <$program> as user <${as_user}>"  >> /var/log/gksudo-pk.log
#
echo "#!/bin/bash
	set -a
	. /etc/environment
	orig_xdg_rundir=${orig_xdg_rundir} \
	DISPLAY=${DISPLAY} \
	XAUTHORITY=${xauth_gksudo} \
	XDG_SESSION_TYPE=${XDG_SESSION_TYPE} \
	XDG_RUNTIME_DIR=${as_usr_rundir} \
	XDG_CONFIG_HOME=${as_usr_home}/.config \
	wayland_socket=${wayland_socket} \
	WAYLAND_DISPLAY=${as_usr_wayland_sock} \
	KDE_SESSION_VERSION=5 \
	KDE_FULL_SESSION=true" > $passwdkey_script
if [[ "$gnom_trmnl" = true ]]; then
	# Add snippet to prevent pkexec from exiting before gnome-terminal instance closes
      # Lines below try to ID new /dev/pts for gnome-terminal and keep script alive until window closes
	# dbus-run-session did NOT work as well. Save dbus-daemon PID to kill later
      echo "before=\$(ls /dev/pts)
      if dbus-launch ${@}; then 
		pgrep -n dbus-daemon > ${as_usr_rundir}/pids
		after=\$(ls /dev/pts) 
         	pts_new=\$(comm -23 <(tr ' ' \$'\\n' <<< \$after | sort) <(tr ' ' \$'\\n' <<< \$before | sort))
         	while [ -e \"/dev/pts/\${pts_new}\" ]; do
            		sleep 1
         	done
	else
		exit 1
      fi" >> $passwdkey_script
else  # every command other than gnome-terminal.
	if [[ $XDG_SESSION_TYPE = "wayland" ]]; then
		echo "dbus-launch ${@}
		pgrep -n dbus-daemon > ${as_usr_rundir}/pids" >> $passwdkey_script
	else
		echo "${@}" >> $passwdkey_script
	fi
fi
chmod 0777 $passwdkey_script

if ! sudo -u $INVOKING_USR  pkexec --user $as_user $passwdkey_script &>/tmp/gk/sudo.pk.error; then
	if [[ -s /tmp/gk/sudo.pk.error ]]; then  # If no error reported, we will allow to fail silently
		if grep "command as another user" /tmp/gk/sudo.pk.error; then
			err_exit1 "$(tail -n 3 /tmp/gk/sudo.pk.error)"
		else
			sed -E -n -i '/no authorization|Gtk-WARNING|No protocol specified/!p' /tmp/gk/sudo.pk.error
			sed -E -n -i '/assertion|isPrimaryInstance|Initializing|QDir/!p' /tmp/gk/sudo.pk.error
			err_exit1 "Error! if cryptic, possibly from unclean exit of child process
 $(cat /tmp/gk/sudo.pk.error)"
		fi	
	fi
else  # succeeded, but check errors/warnings
	if [[ -s /tmp/gk/sudo.pk.error ]]; then
		#  Filter some normally superfluous warnings from stderr/stdout
		tail -n 2 /tmp/gk/sudo.pk.error > /tmp/gk/parsed-error 
		if ! grep -E 'exiting|assertion|Bind on socket|isPrimaryInstance|Gtk-WARNING|kdeinit5|Failed to connect|Initializing|QDir' /tmp/gk/parsed-error; then
			#sed -i '/^[[:space:]]*$/d' /tmp/gk/sudo.pk.error
			sed -E -n -i '/no authorization|Gtk-WARNING|No protocol specified/!p' /tmp/gk/sudo.pk.error
			sed -E -n -i '/assertion|isPrimaryInstance|Initializing|QDir/!p' /tmp/gk/sudo.pk.error
			err_len=$(wc -l < /tmp/gk/sudo.pk.error)
			if [[ "$err_len" -gt 5 ]]; then
				zenity --warning --title="gksudo-pk Warning" --text="$(head -n 3 /tmp/gk/sudo.pk.error)
$(tail -n 3 /tmp/gk/sudo.pk.error)" --no-wrap --no-markup
			elif [[ "$err_len" -ne 0 ]]; then
				zenity --warning --title="gksudo-pk Warning" --text="$(cat /tmp/gk/sudo.pk.error)" --no-wrap --no-markup
			fi		
		fi
	fi
fi

rm $xauth_gksudo 2> /dev/null
rm $passwdkey_script 2> /dev/null
rm /tmp/gk/sudo.pk.error 2> /dev/null
if [[ -d "$as_usr_rundir" ]]; then
	if [[ -f "$as_usr_rundir/pids" ]]; then
		read dbus_pid < $as_usr_rundir/pids
		kill $dbus_pid 2> /dev/null  # Try to kill some orphan dbus-daemons, since not dbus-run-session
            rm $as_usr_rundir/pids
	fi
	umount "$as_usr_rundir/gvfs" 2> /dev/null
	umount "$as_usr_rundir/doc" 2> /dev/null
      rm -R $as_usr_rundir 
fi
gk_instances=$(pgrep -c gksudo-su)
if [[ $XDG_SESSION_TYPE = "wayland" ]] && [[ $gk_instances -lt 2 ]]; then
      chmod 0700 $orig_xdg_rundir
      chmod 0755 $wayland_socket
fi
exit 0
